"""
Constants for use throughout the module.
"""

import re

# Dictionary of expansions for abbreviations
ABBREVIATION_DICT = {
    re.compile(r"\b(?ui)dr[.]?\b"): "doctor",
    re.compile(r"\b(?ui)sh[.]?\b"): "shri",
    re.compile(r"\b(?ui)smt[.]?\b"): "shrimati",
    re.compile(r"\b(?ui)mr[.]?\b"): "mister",
    re.compile(r"\b(?ui)mrs[.]?\b"): "missus",
    re.compile(r"\b(?ui)prof[.]?\b"): "professor",
    re.compile(r"\b(?ui)inc[.]?\b"): "incorporated",
    re.compile(r"\b(?ui)i.e[.]?\b"): "that is",
    re.compile(r"\b(?ui)no[.]?\b"): "number",
    re.compile(r"\b(?ui)pt[.]?\b"): "pandit",
    re.compile(r"\b(?ui)etc[.]?\b"): "et cetera",
    re.compile(r"\b(?ui)rs[.]?\b"): "rupees",
    re.compile(r"\b(?ui)pvt[.]?\b"): "private",
    re.compile(r"\b(?ui)viz[.]?\b"): "videlicet",
    re.compile(r"\b(?ui)ltd[.]?\b"): "limited",
    re.compile(r"\b(?ui)ex[.]?\b"): "exhibit",
    re.compile(r"\b(?ui)art[.]?\b"): "article",
    re.compile(r"\b(?ui)a.i.r[.]?\b"): "All India Reporter",
    re.compile(r"\b(?ui)anr[.]?\b"): "another",
    re.compile(r"\b(?ui)co[.]?\b"): "company",
    re.compile(r"\b(?ui)c.p.c[.]?\b"): "Criminal Procedure Code",
    re.compile(r"\b(?ui)cr.p.c[.]?\b"): "Criminal Procedure Code",
    re.compile(r"\b(?ui)cl[.]?\b"): "clause",
    re.compile(r"\b(?ui)cls[.]?\b"): "clauses",
    re.compile(r"\b(?ui)f.i.r[.]?\b"): "First Information Report",
    re.compile(r"\b(?ui)i.p.c[.]?\b"): "Indian Penal Code",
    re.compile(r"\b(?ui)ors[.]?\b"): "others",
    re.compile(r"\b(?ui)p[.]?\b"): "page number",
    re.compile(r"\b(?ui)p.w[.]?\b"): "prosecuted witness",
    re.compile(r"\b(?ui)s[.]?\b"): "section",
    re.compile(r"\b(?ui)sec[.]?\b"): "section",
    re.compile(r"\b(?ui)sub-s[.]?\b"): "sub section",
    re.compile(r"\b(?ui)schs[.]?\b"): "schedules",
    re.compile(r"\b(?ui)s.c.r[.]?\b"): "Supreme Court Reporter",
    re.compile(r"\b(?ui)vs[.]?\b"): "versus",
    re.compile(r"\b(?ui)v[.]?\b"): "versus"
}

# Dictionary of expansions for contractions
CONTRACTION_DICT = {
    re.compile(r"(?ui)\bain't\b"): "is not",
    re.compile(r"(?ui)\baren't\b"): "are not",
    re.compile(r"(?ui)\bcan't\b"): "cannot",
    re.compile(r"(?ui)\bcan't've\b"): "cannot have",
    re.compile(r"(?ui)\b'cause\b"): "because",
    re.compile(r"(?ui)\bcould've\b"): "could have",
    re.compile(r"(?ui)\bcouldn't\b"): "could not",
    re.compile(r"(?ui)\bcouldn't've\b"): "could not have",
    re.compile(r"(?ui)\bdidn't\b"): "did not",
    re.compile(r"(?ui)\bdoesn't\b"): "does not",
    re.compile(r"(?ui)\bdon't\b"): "do not",
    re.compile(r"(?ui)\bhadn't\b"): "had not",
    re.compile(r"(?ui)\bhadn't've\b"): "had not have",
    re.compile(r"(?ui)\bhasn't\b"): "has not",
    re.compile(r"(?ui)\bhaven't\b"): "have not",
    re.compile(r"(?ui)\bhe'd\b"): "he would",
    re.compile(r"(?ui)\bhe'd've\b"): "he would have",
    re.compile(r"(?ui)\bhe'll\b"): "he will",
    re.compile(r"(?ui)\bhe'll've\b"): "he he will have",
    re.compile(r"(?ui)\bhe's\b"): "he is",
    re.compile(r"(?ui)\bhow'd\b"): "how did",
    re.compile(r"(?ui)\bhow'd'y\b"): "how do you",
    re.compile(r"(?ui)\bhow'll\b"): "how will",
    re.compile(r"(?ui)\bhow's\b"): "how is",
    re.compile(r"(?ui)\bi'd\b"): "i would",
    re.compile(r"(?ui)\bi'd've\b"): "i would have",
    re.compile(r"(?ui)\bi'll\b"): "i will",
    re.compile(r"(?ui)\bi'll've\b"): "i will have",
    re.compile(r"(?ui)\bi'm\b"): "i am",
    re.compile(r"(?ui)\bi've\b"): "i have",
    re.compile(r"(?ui)\bisn't\b"): "is not",
    re.compile(r"(?ui)\bit'd\b"): "it would",
    re.compile(r"(?ui)\bit'd've\b"): "it would have",
    re.compile(r"(?ui)\bit'll\b"): "it will",
    re.compile(r"(?ui)\bit'll've\b"): "it will have",
    re.compile(r"(?ui)\bit's\b"): "it is",
    re.compile(r"(?ui)\blet's\b"): "let us",
    re.compile(r"(?ui)\bma'am\b"): "madam",
    re.compile(r"(?ui)\bmayn't\b"): "may not",
    re.compile(r"(?ui)\bmight've\b"): "might have",
    re.compile(r"(?ui)\bmightn't\b"): "might not",
    re.compile(r"(?ui)\bmightn't've\b"): "might not have",
    re.compile(r"(?ui)\bmust've\b"): "must have",
    re.compile(r"(?ui)\bmustn't\b"): "must not",
    re.compile(r"(?ui)\bmustn't've\b"): "must not have",
    re.compile(r"(?ui)\bneedn't\b"): "need not",
    re.compile(r"(?ui)\bneedn't've\b"): "need not have",
    re.compile(r"(?ui)\bo'clock\b"): "of the clock",
    re.compile(r"(?ui)\boughtn't\b"): "ought not",
    re.compile(r"(?ui)\boughtn't've\b"): "ought not have",
    re.compile(r"(?ui)\bshan't\b"): "shall not",
    re.compile(r"(?ui)\bsha'n't\b"): "shall not",
    re.compile(r"(?ui)\bshan't've\b"): "shall not have",
    re.compile(r"(?ui)\bshe'd\b"): "she would",
    re.compile(r"(?ui)\bshe'd've\b"): "she would have",
    re.compile(r"(?ui)\bshe'll\b"): "she will",
    re.compile(r"(?ui)\bshe'll've\b"): "she will have",
    re.compile(r"(?ui)\bshe's\b"): "she is",
    re.compile(r"(?ui)\bshould've\b"): "should have",
    re.compile(r"(?ui)\bshouldn't\b"): "should not",
    re.compile(r"(?ui)\bshouldn't've\b"): "should not have",
    re.compile(r"(?ui)\bso've\b"): "so have",
    re.compile(r"(?ui)\bso's\b"): "so as",
    re.compile(r"(?ui)\bthat'd\b"): "that would",
    re.compile(r"(?ui)\bthat'd've\b"): "that would have",
    re.compile(r"(?ui)\bthat's\b"): "that is",
    re.compile(r"(?ui)\bthere'd\b"): "there would",
    re.compile(r"(?ui)\bthere'd've\b"): "there would have",
    re.compile(r"(?ui)\bthere's\b"): "there is",
    re.compile(r"(?ui)\bthey'd\b"): "they would",
    re.compile(r"(?ui)\bthey'd've\b"): "they would have",
    re.compile(r"(?ui)\bthey'll\b"): "they will",
    re.compile(r"(?ui)\bthey'll've\b"): "they will have",
    re.compile(r"(?ui)\bthey're\b"): "they are",
    re.compile(r"(?ui)\bthey've\b"): "they have",
    re.compile(r"(?ui)\bto've\b"): "to have",
    re.compile(r"(?ui)\bwasn't\b"): "was not",
    re.compile(r"(?ui)\bwe'd\b"): "we would",
    re.compile(r"(?ui)\bwe'd've\b"): "we would have",
    re.compile(r"(?ui)\bwe'll\b"): "we will",
    re.compile(r"(?ui)\bwe'll've\b"): "we will have",
    re.compile(r"(?ui)\bwe're\b"): "we are",
    re.compile(r"(?ui)\bwe've\b"): "we have",
    re.compile(r"(?ui)\bweren't\b"): "were not",
    re.compile(r"(?ui)\bwhat'll\b"): "what will",
    re.compile(r"(?ui)\bwhat'll've\b"): "what will have",
    re.compile(r"(?ui)\bwhat're\b"): "what are",
    re.compile(r"(?ui)\bwhat's\b"): "what is",
    re.compile(r"(?ui)\bwhat've\b"): "what have",
    re.compile(r"(?ui)\bwhen's\b"): "when is",
    re.compile(r"(?ui)\bwhen've\b"): "when have",
    re.compile(r"(?ui)\bwhere'd\b"): "where did",
    re.compile(r"(?ui)\bwhere's\b"): "where is",
    re.compile(r"(?ui)\bwhere've\b"): "where have",
    re.compile(r"(?ui)\bwho'll\b"): "who will",
    re.compile(r"(?ui)\bwho'll've\b"): "who will have",
    re.compile(r"(?ui)\bwho's\b"): "who is",
    re.compile(r"(?ui)\bwho've\b"): "who have",
    re.compile(r"(?ui)\bwhy's\b"): "why is",
    re.compile(r"(?ui)\bwhy've\b"): "why have",
    re.compile(r"(?ui)\bwill've\b"): "will have",
    re.compile(r"(?ui)\bwon't\b"): "will not",
    re.compile(r"(?ui)\bwon't've\b"): "will not have",
    re.compile(r"(?ui)\bwould've\b"): "would have",
    re.compile(r"(?ui)\bwouldn't\b"): "would not",
    re.compile(r"(?ui)\bwouldn't've\b"): "would not have",
    re.compile(r"(?ui)\by'all\b"): "you all",
    re.compile(r"(?ui)\by'all'd\b"): "you all would",
    re.compile(r"(?ui)\by'all'd've\b"): "you all would have",
    re.compile(r"(?ui)\by'all're\b"): "you all are",
    re.compile(r"(?ui)\by'all've\b"): "you all have",
    re.compile(r"(?ui)\byou'd\b"): "you would",
    re.compile(r"(?ui)\byou'd've\b"): "you would have",
    re.compile(r"(?ui)\byou'll\b"): "you will",
    re.compile(r"(?ui)\byou'll've\b"): "you will have",
    re.compile(r"(?ui)\byou're\b"): "you are",
    re.compile(r"(?ui)\byou've\b"): "you have"
}

PARA_DEMARCATOR = re.compile(r"(?miu)^\s*\d+(?:\.\d+)*\.\s*")
SPACE           = re.compile(r"\s+")
