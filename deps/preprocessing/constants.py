"""
Constants for use throughout the module.
"""

import re

# Dictionary of expansions for abbreviations
ABBREVIATION_DICT = {
    re.compile(r"(?ui)(?<=\s|^)dr[.]?(?=\s|$)"): "doctor",
    re.compile(r"(?ui)(?<=\s|^)sh[.]?(?=\s|$)"): "shri",
    re.compile(r"(?ui)(?<=\s|^)smt[.]?(?=\s|$)"): "shrimati",
    re.compile(r"(?ui)(?<=\s|^)mr[.]?(?=\s|$)"): "mister",
    re.compile(r"(?ui)(?<=\s|^)mrs[.]?(?=\s|$)"): "missus",
    re.compile(r"(?ui)(?<=\s|^)prof[.]?(?=\s|$)"): "professor",
    re.compile(r"(?ui)(?<=\s|^)inc[.]?(?=\s|$)"): "incorporated",
    re.compile(r"(?ui)(?<=\s|^)i\.e[.]?(?=\s|$)"): "that is",
    re.compile(r"(?ui)(?<=\s|^)no\.(?=\s|$)"): "number",
    re.compile(r"(?ui)(?<=\s|^)pt\.(?=\s|$)"): "pandit",
    re.compile(r"(?ui)(?<=\s|^)etc[.]?(?=\s|$)"): "et cetera",
    re.compile(r"(?ui)(?<=\s|^)rs[.]?(?=\s|$)"): "rupees",
    re.compile(r"(?ui)(?<=\s|^)pvt[.]?(?=\s|$)"): "private",
    re.compile(r"(?ui)(?<=\s|^)viz[.]?(?=\s|$)"): "videlicet",
    re.compile(r"(?ui)(?<=\s|^)ltd[.]?(?=\s|$)"): "limited",
    re.compile(r"(?ui)(?<=\s|^)ex[.]?(?=\s|$)"): "exhibit",
    re.compile(r"(?ui)(?<=\s|^)art[.]?(?=\s|$)"): "article",
    re.compile(r"(?ui)(?<=\s|^)a\.i\.r[.]?(?=\s|$)"): "All India Reporter",
    re.compile(r"(?ui)(?<=\s|^)anr[.]?(?=\s|$)"): "another",
    re.compile(r"(?ui)(?<=\s|^)co[.]?(?=\s|$)"): "company",
    re.compile(r"(?ui)(?<=\s|^)c\.p\.c[.]?(?=\s|$)"): "Criminal Procedure Code",
    re.compile(r"(?ui)(?<=\s|^)cr\.p\.c[.]?(?=\s|$)"): "Criminal Procedure Code",
    re.compile(r"(?ui)(?<=\s|^)cl[.]?(?=\s|$)"): "clause",
    re.compile(r"(?ui)(?<=\s|^)cls[.]?(?=\s|$)"): "clauses",
    re.compile(r"(?ui)(?<=\s|^)f\.i\.r[.]?(?=\s|$)"): "First Information Report",
    re.compile(r"(?ui)(?<=\s|^)i\.p\.c[.]?(?=\s|$)"): "Indian Penal Code",
    re.compile(r"(?ui)(?<=\s|^)ors[.]?(?=\s|$)"): "others",
    re.compile(r"(?ui)(?<=\s|^)pg[.]?(?=\s|$)"): "page number",
    re.compile(r"(?ui)(?<=\s|^)p\.w\.(?=\s|$)"): "prosecuted witness",
    re.compile(r"(?ui)(?<=\s|^)s\.(?=\s|$)"): "section",
    re.compile(r"(?ui)(?<=\s|^)sec[.]?(?=\s|$)"): "section",
    re.compile(r"(?ui)(?<=\s|^)sub-s\.(?=\s|$)"): "sub section",
    re.compile(r"(?ui)(?<=\s|^)schs[.]?(?=\s|$)"): "schedules",
    re.compile(r"(?ui)(?<=\s|^)s\.c\.r[.]?(?=\s|$)"): "Supreme Court Reporter",
    re.compile(r"(?ui)(?<=\s|^)vs[.]?(?=\s|$)"): "versus",
    re.compile(r"(?ui)(?<=\s|^)v[.]?(?=\s|$)"): "versus"
}

# Dictionary of expansions for contractions
CONTRACTION_DICT = {
    re.compile(r"(?ui)(?<=\s|^)ain't(?=\s|$)"): "is not",
    re.compile(r"(?ui)(?<=\s|^)aren't(?=\s|$)"): "are not",
    re.compile(r"(?ui)(?<=\s|^)can't(?=\s|$)"): "cannot",
    re.compile(r"(?ui)(?<=\s|^)can't've(?=\s|$)"): "cannot have",
    re.compile(r"(?ui)(?<=\s|^)'cause(?=\s|$)"): "because",
    re.compile(r"(?ui)(?<=\s|^)could've(?=\s|$)"): "could have",
    re.compile(r"(?ui)(?<=\s|^)couldn't(?=\s|$)"): "could not",
    re.compile(r"(?ui)(?<=\s|^)couldn't've(?=\s|$)"): "could not have",
    re.compile(r"(?ui)(?<=\s|^)didn't(?=\s|$)"): "did not",
    re.compile(r"(?ui)(?<=\s|^)doesn't(?=\s|$)"): "does not",
    re.compile(r"(?ui)(?<=\s|^)don't(?=\s|$)"): "do not",
    re.compile(r"(?ui)(?<=\s|^)hadn't(?=\s|$)"): "had not",
    re.compile(r"(?ui)(?<=\s|^)hadn't've(?=\s|$)"): "had not have",
    re.compile(r"(?ui)(?<=\s|^)hasn't(?=\s|$)"): "has not",
    re.compile(r"(?ui)(?<=\s|^)haven't(?=\s|$)"): "have not",
    re.compile(r"(?ui)(?<=\s|^)he'd(?=\s|$)"): "he would",
    re.compile(r"(?ui)(?<=\s|^)he'd've(?=\s|$)"): "he would have",
    re.compile(r"(?ui)(?<=\s|^)he'll(?=\s|$)"): "he will",
    re.compile(r"(?ui)(?<=\s|^)he'll've(?=\s|$)"): "he he will have",
    re.compile(r"(?ui)(?<=\s|^)he's(?=\s|$)"): "he is",
    re.compile(r"(?ui)(?<=\s|^)how'd(?=\s|$)"): "how did",
    re.compile(r"(?ui)(?<=\s|^)how'd'y(?=\s|$)"): "how do you",
    re.compile(r"(?ui)(?<=\s|^)how'll(?=\s|$)"): "how will",
    re.compile(r"(?ui)(?<=\s|^)how's(?=\s|$)"): "how is",
    re.compile(r"(?ui)(?<=\s|^)i'd(?=\s|$)"): "i would",
    re.compile(r"(?ui)(?<=\s|^)i'd've(?=\s|$)"): "i would have",
    re.compile(r"(?ui)(?<=\s|^)i'll(?=\s|$)"): "i will",
    re.compile(r"(?ui)(?<=\s|^)i'll've(?=\s|$)"): "i will have",
    re.compile(r"(?ui)(?<=\s|^)i'm(?=\s|$)"): "i am",
    re.compile(r"(?ui)(?<=\s|^)i've(?=\s|$)"): "i have",
    re.compile(r"(?ui)(?<=\s|^)isn't(?=\s|$)"): "is not",
    re.compile(r"(?ui)(?<=\s|^)it'd(?=\s|$)"): "it would",
    re.compile(r"(?ui)(?<=\s|^)it'd've(?=\s|$)"): "it would have",
    re.compile(r"(?ui)(?<=\s|^)it'll(?=\s|$)"): "it will",
    re.compile(r"(?ui)(?<=\s|^)it'll've(?=\s|$)"): "it will have",
    re.compile(r"(?ui)(?<=\s|^)it's(?=\s|$)"): "it is",
    re.compile(r"(?ui)(?<=\s|^)let's(?=\s|$)"): "let us",
    re.compile(r"(?ui)(?<=\s|^)ma'am(?=\s|$)"): "madam",
    re.compile(r"(?ui)(?<=\s|^)mayn't(?=\s|$)"): "may not",
    re.compile(r"(?ui)(?<=\s|^)might've(?=\s|$)"): "might have",
    re.compile(r"(?ui)(?<=\s|^)mightn't(?=\s|$)"): "might not",
    re.compile(r"(?ui)(?<=\s|^)mightn't've(?=\s|$)"): "might not have",
    re.compile(r"(?ui)(?<=\s|^)must've(?=\s|$)"): "must have",
    re.compile(r"(?ui)(?<=\s|^)mustn't(?=\s|$)"): "must not",
    re.compile(r"(?ui)(?<=\s|^)mustn't've(?=\s|$)"): "must not have",
    re.compile(r"(?ui)(?<=\s|^)needn't(?=\s|$)"): "need not",
    re.compile(r"(?ui)(?<=\s|^)needn't've(?=\s|$)"): "need not have",
    re.compile(r"(?ui)(?<=\s|^)o'clock(?=\s|$)"): "of the clock",
    re.compile(r"(?ui)(?<=\s|^)oughtn't(?=\s|$)"): "ought not",
    re.compile(r"(?ui)(?<=\s|^)oughtn't've(?=\s|$)"): "ought not have",
    re.compile(r"(?ui)(?<=\s|^)shan't(?=\s|$)"): "shall not",
    re.compile(r"(?ui)(?<=\s|^)sha'n't(?=\s|$)"): "shall not",
    re.compile(r"(?ui)(?<=\s|^)shan't've(?=\s|$)"): "shall not have",
    re.compile(r"(?ui)(?<=\s|^)she'd(?=\s|$)"): "she would",
    re.compile(r"(?ui)(?<=\s|^)she'd've(?=\s|$)"): "she would have",
    re.compile(r"(?ui)(?<=\s|^)she'll(?=\s|$)"): "she will",
    re.compile(r"(?ui)(?<=\s|^)she'll've(?=\s|$)"): "she will have",
    re.compile(r"(?ui)(?<=\s|^)she's(?=\s|$)"): "she is",
    re.compile(r"(?ui)(?<=\s|^)should've(?=\s|$)"): "should have",
    re.compile(r"(?ui)(?<=\s|^)shouldn't(?=\s|$)"): "should not",
    re.compile(r"(?ui)(?<=\s|^)shouldn't've(?=\s|$)"): "should not have",
    re.compile(r"(?ui)(?<=\s|^)so've(?=\s|$)"): "so have",
    re.compile(r"(?ui)(?<=\s|^)so's(?=\s|$)"): "so as",
    re.compile(r"(?ui)(?<=\s|^)that'd(?=\s|$)"): "that would",
    re.compile(r"(?ui)(?<=\s|^)that'd've(?=\s|$)"): "that would have",
    re.compile(r"(?ui)(?<=\s|^)that's(?=\s|$)"): "that is",
    re.compile(r"(?ui)(?<=\s|^)there'd(?=\s|$)"): "there would",
    re.compile(r"(?ui)(?<=\s|^)there'd've(?=\s|$)"): "there would have",
    re.compile(r"(?ui)(?<=\s|^)there's(?=\s|$)"): "there is",
    re.compile(r"(?ui)(?<=\s|^)they'd(?=\s|$)"): "they would",
    re.compile(r"(?ui)(?<=\s|^)they'd've(?=\s|$)"): "they would have",
    re.compile(r"(?ui)(?<=\s|^)they'll(?=\s|$)"): "they will",
    re.compile(r"(?ui)(?<=\s|^)they'll've(?=\s|$)"): "they will have",
    re.compile(r"(?ui)(?<=\s|^)they're(?=\s|$)"): "they are",
    re.compile(r"(?ui)(?<=\s|^)they've(?=\s|$)"): "they have",
    re.compile(r"(?ui)(?<=\s|^)to've(?=\s|$)"): "to have",
    re.compile(r"(?ui)(?<=\s|^)wasn't(?=\s|$)"): "was not",
    re.compile(r"(?ui)(?<=\s|^)we'd(?=\s|$)"): "we would",
    re.compile(r"(?ui)(?<=\s|^)we'd've(?=\s|$)"): "we would have",
    re.compile(r"(?ui)(?<=\s|^)we'll(?=\s|$)"): "we will",
    re.compile(r"(?ui)(?<=\s|^)we'll've(?=\s|$)"): "we will have",
    re.compile(r"(?ui)(?<=\s|^)we're(?=\s|$)"): "we are",
    re.compile(r"(?ui)(?<=\s|^)we've(?=\s|$)"): "we have",
    re.compile(r"(?ui)(?<=\s|^)weren't(?=\s|$)"): "were not",
    re.compile(r"(?ui)(?<=\s|^)what'll(?=\s|$)"): "what will",
    re.compile(r"(?ui)(?<=\s|^)what'll've(?=\s|$)"): "what will have",
    re.compile(r"(?ui)(?<=\s|^)what're(?=\s|$)"): "what are",
    re.compile(r"(?ui)(?<=\s|^)what's(?=\s|$)"): "what is",
    re.compile(r"(?ui)(?<=\s|^)what've(?=\s|$)"): "what have",
    re.compile(r"(?ui)(?<=\s|^)when's(?=\s|$)"): "when is",
    re.compile(r"(?ui)(?<=\s|^)when've(?=\s|$)"): "when have",
    re.compile(r"(?ui)(?<=\s|^)where'd(?=\s|$)"): "where did",
    re.compile(r"(?ui)(?<=\s|^)where's(?=\s|$)"): "where is",
    re.compile(r"(?ui)(?<=\s|^)where've(?=\s|$)"): "where have",
    re.compile(r"(?ui)(?<=\s|^)who'll(?=\s|$)"): "who will",
    re.compile(r"(?ui)(?<=\s|^)who'll've(?=\s|$)"): "who will have",
    re.compile(r"(?ui)(?<=\s|^)who's(?=\s|$)"): "who is",
    re.compile(r"(?ui)(?<=\s|^)who've(?=\s|$)"): "who have",
    re.compile(r"(?ui)(?<=\s|^)why's(?=\s|$)"): "why is",
    re.compile(r"(?ui)(?<=\s|^)why've(?=\s|$)"): "why have",
    re.compile(r"(?ui)(?<=\s|^)will've(?=\s|$)"): "will have",
    re.compile(r"(?ui)(?<=\s|^)won't(?=\s|$)"): "will not",
    re.compile(r"(?ui)(?<=\s|^)won't've(?=\s|$)"): "will not have",
    re.compile(r"(?ui)(?<=\s|^)would've(?=\s|$)"): "would have",
    re.compile(r"(?ui)(?<=\s|^)wouldn't(?=\s|$)"): "would not",
    re.compile(r"(?ui)(?<=\s|^)wouldn't've(?=\s|$)"): "would not have",
    re.compile(r"(?ui)(?<=\s|^)y'all(?=\s|$)"): "you all",
    re.compile(r"(?ui)(?<=\s|^)y'all'd(?=\s|$)"): "you all would",
    re.compile(r"(?ui)(?<=\s|^)y'all'd've(?=\s|$)"): "you all would have",
    re.compile(r"(?ui)(?<=\s|^)y'all're(?=\s|$)"): "you all are",
    re.compile(r"(?ui)(?<=\s|^)y'all've(?=\s|$)"): "you all have",
    re.compile(r"(?ui)(?<=\s|^)you'd(?=\s|$)"): "you would",
    re.compile(r"(?ui)(?<=\s|^)you'd've(?=\s|$)"): "you would have",
    re.compile(r"(?ui)(?<=\s|^)you'll(?=\s|$)"): "you will",
    re.compile(r"(?ui)(?<=\s|^)you'll've(?=\s|$)"): "you will have",
    re.compile(r"(?ui)(?<=\s|^)you're(?=\s|$)"): "you are",
    re.compile(r"(?ui)(?<=\s|^)you've(?=\s|$)"): "you have"
}

PARA_DEMARCATOR = re.compile(r"(?miu)^\s*\d+(?:\.\d+)*\.\s*")
SPACE           = re.compile(r"\s+")
