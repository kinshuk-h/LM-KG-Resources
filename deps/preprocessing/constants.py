"""
Constants for use throughout the module.
"""

import re

# Dictionary of expansions for abbreviations
ABBREVIATION_DICT = {
    re.compile(r"(?ui)\bdr[.]?(?=\s|$)"): "doctor",
    re.compile(r"(?ui)\bsh[.]?(?=\s|$)"): "shri",
    re.compile(r"(?ui)\bsmt[.]?(?=\s|$)"): "shrimati",
    re.compile(r"(?ui)\bmr[.]?(?=\s|$)"): "mister",
    re.compile(r"(?ui)\bmrs[.]?(?=\s|$)"): "missus",
    re.compile(r"(?ui)\bprof[.]?(?=\s|$)"): "professor",
    re.compile(r"(?ui)\binc[.]?(?=\s|$)"): "incorporated",
    re.compile(r"(?ui)\bi\.e[.]?(?=\s|$)"): "that is",
    re.compile(r"(?ui)\bno\.(?=\s|$)"): "number",
    re.compile(r"(?ui)\bpt\.(?=\s|$)"): "pandit",
    re.compile(r"(?ui)\betc[.]?(?=\s|$)"): "et cetera",
    re.compile(r"(?ui)\brs[.]?(?=\s|$)"): "rupees",
    re.compile(r"(?ui)\bpvt[.]?(?=\s|$)"): "private",
    re.compile(r"(?ui)\bviz[.]?(?=\s|$)"): "videlicet",
    re.compile(r"(?ui)\bltd[.]?(?=\s|$)"): "limited",
    re.compile(r"(?ui)\bex[.]?(?=\s|$)"): "exhibit",
    re.compile(r"(?ui)\bart[.]?(?=\s|$)"): "article",
    re.compile(r"(?ui)\ba\.i\.r[.]?(?=\s|$)"): "All India Reporter",
    re.compile(r"(?ui)\banr[.]?(?=\s|$)"): "another",
    re.compile(r"(?ui)\bco[.]?(?=\s|$)"): "company",
    re.compile(r"(?ui)\bc\.p\.c[.]?(?=\s|$)"): "Criminal Procedure Code",
    re.compile(r"(?ui)\bcr\.p\.c[.]?(?=\s|$)"): "Criminal Procedure Code",
    re.compile(r"(?ui)\bcl[.]?(?=\s|$)"): "clause",
    re.compile(r"(?ui)\bcls[.]?(?=\s|$)"): "clauses",
    re.compile(r"(?ui)\bf\.i\.r[.]?(?=\s|$)"): "First Information Report",
    re.compile(r"(?ui)\bi\.p\.c[.]?(?=\s|$)"): "Indian Penal Code",
    re.compile(r"(?ui)\bors[.]?(?=\s|$)"): "others",
    re.compile(r"(?ui)\bpg[.]?(?=\s|$)"): "page number",
    re.compile(r"(?ui)\bp\.w\.(?=\s|$)"): "prosecuted witness",
    re.compile(r"(?ui)\bs\.(?=\s|$)"): "section",
    re.compile(r"(?ui)\bsec[.]?(?=\s|$)"): "section",
    re.compile(r"(?ui)\bsub-s\.(?=\s|$)"): "sub section",
    re.compile(r"(?ui)\bschs[.]?(?=\s|$)"): "schedules",
    re.compile(r"(?ui)\bs\.c\.r[.]?(?=\s|$)"): "Supreme Court Reporter",
    re.compile(r"(?ui)\bvs[.]?(?=\s|$)"): "versus",
    re.compile(r"(?ui)\bv[.]?(?=\s|$)"): "versus"
}

# Dictionary of expansions for contractions
CONTRACTION_DICT = {
    re.compile(r"(?ui)\bain't(?=\s|$)"): "is not",
    re.compile(r"(?ui)\baren't(?=\s|$)"): "are not",
    re.compile(r"(?ui)\bcan't(?=\s|$)"): "cannot",
    re.compile(r"(?ui)\bcan't've(?=\s|$)"): "cannot have",
    re.compile(r"(?ui)\b'cause(?=\s|$)"): "because",
    re.compile(r"(?ui)\bcould've(?=\s|$)"): "could have",
    re.compile(r"(?ui)\bcouldn't(?=\s|$)"): "could not",
    re.compile(r"(?ui)\bcouldn't've(?=\s|$)"): "could not have",
    re.compile(r"(?ui)\bdidn't(?=\s|$)"): "did not",
    re.compile(r"(?ui)\bdoesn't(?=\s|$)"): "does not",
    re.compile(r"(?ui)\bdon't(?=\s|$)"): "do not",
    re.compile(r"(?ui)\bhadn't(?=\s|$)"): "had not",
    re.compile(r"(?ui)\bhadn't've(?=\s|$)"): "had not have",
    re.compile(r"(?ui)\bhasn't(?=\s|$)"): "has not",
    re.compile(r"(?ui)\bhaven't(?=\s|$)"): "have not",
    re.compile(r"(?ui)\bhe'd(?=\s|$)"): "he would",
    re.compile(r"(?ui)\bhe'd've(?=\s|$)"): "he would have",
    re.compile(r"(?ui)\bhe'll(?=\s|$)"): "he will",
    re.compile(r"(?ui)\bhe'll've(?=\s|$)"): "he he will have",
    re.compile(r"(?ui)\bhe's(?=\s|$)"): "he is",
    re.compile(r"(?ui)\bhow'd(?=\s|$)"): "how did",
    re.compile(r"(?ui)\bhow'd'y(?=\s|$)"): "how do you",
    re.compile(r"(?ui)\bhow'll(?=\s|$)"): "how will",
    re.compile(r"(?ui)\bhow's(?=\s|$)"): "how is",
    re.compile(r"(?ui)\bi'd(?=\s|$)"): "i would",
    re.compile(r"(?ui)\bi'd've(?=\s|$)"): "i would have",
    re.compile(r"(?ui)\bi'll(?=\s|$)"): "i will",
    re.compile(r"(?ui)\bi'll've(?=\s|$)"): "i will have",
    re.compile(r"(?ui)\bi'm(?=\s|$)"): "i am",
    re.compile(r"(?ui)\bi've(?=\s|$)"): "i have",
    re.compile(r"(?ui)\bisn't(?=\s|$)"): "is not",
    re.compile(r"(?ui)\bit'd(?=\s|$)"): "it would",
    re.compile(r"(?ui)\bit'd've(?=\s|$)"): "it would have",
    re.compile(r"(?ui)\bit'll(?=\s|$)"): "it will",
    re.compile(r"(?ui)\bit'll've(?=\s|$)"): "it will have",
    re.compile(r"(?ui)\bit's(?=\s|$)"): "it is",
    re.compile(r"(?ui)\blet's(?=\s|$)"): "let us",
    re.compile(r"(?ui)\bma'am(?=\s|$)"): "madam",
    re.compile(r"(?ui)\bmayn't(?=\s|$)"): "may not",
    re.compile(r"(?ui)\bmight've(?=\s|$)"): "might have",
    re.compile(r"(?ui)\bmightn't(?=\s|$)"): "might not",
    re.compile(r"(?ui)\bmightn't've(?=\s|$)"): "might not have",
    re.compile(r"(?ui)\bmust've(?=\s|$)"): "must have",
    re.compile(r"(?ui)\bmustn't(?=\s|$)"): "must not",
    re.compile(r"(?ui)\bmustn't've(?=\s|$)"): "must not have",
    re.compile(r"(?ui)\bneedn't(?=\s|$)"): "need not",
    re.compile(r"(?ui)\bneedn't've(?=\s|$)"): "need not have",
    re.compile(r"(?ui)\bo'clock(?=\s|$)"): "of the clock",
    re.compile(r"(?ui)\boughtn't(?=\s|$)"): "ought not",
    re.compile(r"(?ui)\boughtn't've(?=\s|$)"): "ought not have",
    re.compile(r"(?ui)\bshan't(?=\s|$)"): "shall not",
    re.compile(r"(?ui)\bsha'n't(?=\s|$)"): "shall not",
    re.compile(r"(?ui)\bshan't've(?=\s|$)"): "shall not have",
    re.compile(r"(?ui)\bshe'd(?=\s|$)"): "she would",
    re.compile(r"(?ui)\bshe'd've(?=\s|$)"): "she would have",
    re.compile(r"(?ui)\bshe'll(?=\s|$)"): "she will",
    re.compile(r"(?ui)\bshe'll've(?=\s|$)"): "she will have",
    re.compile(r"(?ui)\bshe's(?=\s|$)"): "she is",
    re.compile(r"(?ui)\bshould've(?=\s|$)"): "should have",
    re.compile(r"(?ui)\bshouldn't(?=\s|$)"): "should not",
    re.compile(r"(?ui)\bshouldn't've(?=\s|$)"): "should not have",
    re.compile(r"(?ui)\bso've(?=\s|$)"): "so have",
    re.compile(r"(?ui)\bso's(?=\s|$)"): "so as",
    re.compile(r"(?ui)\bthat'd(?=\s|$)"): "that would",
    re.compile(r"(?ui)\bthat'd've(?=\s|$)"): "that would have",
    re.compile(r"(?ui)\bthat's(?=\s|$)"): "that is",
    re.compile(r"(?ui)\bthere'd(?=\s|$)"): "there would",
    re.compile(r"(?ui)\bthere'd've(?=\s|$)"): "there would have",
    re.compile(r"(?ui)\bthere's(?=\s|$)"): "there is",
    re.compile(r"(?ui)\bthey'd(?=\s|$)"): "they would",
    re.compile(r"(?ui)\bthey'd've(?=\s|$)"): "they would have",
    re.compile(r"(?ui)\bthey'll(?=\s|$)"): "they will",
    re.compile(r"(?ui)\bthey'll've(?=\s|$)"): "they will have",
    re.compile(r"(?ui)\bthey're(?=\s|$)"): "they are",
    re.compile(r"(?ui)\bthey've(?=\s|$)"): "they have",
    re.compile(r"(?ui)\bto've(?=\s|$)"): "to have",
    re.compile(r"(?ui)\bwasn't(?=\s|$)"): "was not",
    re.compile(r"(?ui)\bwe'd(?=\s|$)"): "we would",
    re.compile(r"(?ui)\bwe'd've(?=\s|$)"): "we would have",
    re.compile(r"(?ui)\bwe'll(?=\s|$)"): "we will",
    re.compile(r"(?ui)\bwe'll've(?=\s|$)"): "we will have",
    re.compile(r"(?ui)\bwe're(?=\s|$)"): "we are",
    re.compile(r"(?ui)\bwe've(?=\s|$)"): "we have",
    re.compile(r"(?ui)\bweren't(?=\s|$)"): "were not",
    re.compile(r"(?ui)\bwhat'll(?=\s|$)"): "what will",
    re.compile(r"(?ui)\bwhat'll've(?=\s|$)"): "what will have",
    re.compile(r"(?ui)\bwhat're(?=\s|$)"): "what are",
    re.compile(r"(?ui)\bwhat's(?=\s|$)"): "what is",
    re.compile(r"(?ui)\bwhat've(?=\s|$)"): "what have",
    re.compile(r"(?ui)\bwhen's(?=\s|$)"): "when is",
    re.compile(r"(?ui)\bwhen've(?=\s|$)"): "when have",
    re.compile(r"(?ui)\bwhere'd(?=\s|$)"): "where did",
    re.compile(r"(?ui)\bwhere's(?=\s|$)"): "where is",
    re.compile(r"(?ui)\bwhere've(?=\s|$)"): "where have",
    re.compile(r"(?ui)\bwho'll(?=\s|$)"): "who will",
    re.compile(r"(?ui)\bwho'll've(?=\s|$)"): "who will have",
    re.compile(r"(?ui)\bwho's(?=\s|$)"): "who is",
    re.compile(r"(?ui)\bwho've(?=\s|$)"): "who have",
    re.compile(r"(?ui)\bwhy's(?=\s|$)"): "why is",
    re.compile(r"(?ui)\bwhy've(?=\s|$)"): "why have",
    re.compile(r"(?ui)\bwill've(?=\s|$)"): "will have",
    re.compile(r"(?ui)\bwon't(?=\s|$)"): "will not",
    re.compile(r"(?ui)\bwon't've(?=\s|$)"): "will not have",
    re.compile(r"(?ui)\bwould've(?=\s|$)"): "would have",
    re.compile(r"(?ui)\bwouldn't(?=\s|$)"): "would not",
    re.compile(r"(?ui)\bwouldn't've(?=\s|$)"): "would not have",
    re.compile(r"(?ui)\by'all(?=\s|$)"): "you all",
    re.compile(r"(?ui)\by'all'd(?=\s|$)"): "you all would",
    re.compile(r"(?ui)\by'all'd've(?=\s|$)"): "you all would have",
    re.compile(r"(?ui)\by'all're(?=\s|$)"): "you all are",
    re.compile(r"(?ui)\by'all've(?=\s|$)"): "you all have",
    re.compile(r"(?ui)\byou'd(?=\s|$)"): "you would",
    re.compile(r"(?ui)\byou'd've(?=\s|$)"): "you would have",
    re.compile(r"(?ui)\byou'll(?=\s|$)"): "you will",
    re.compile(r"(?ui)\byou'll've(?=\s|$)"): "you will have",
    re.compile(r"(?ui)\byou're(?=\s|$)"): "you are",
    re.compile(r"(?ui)\byou've(?=\s|$)"): "you have"
}

PARA_DEMARCATOR = re.compile(r"(?miu)^\s*\d+(?:\.\d+)*\.\s*")
SPACE           = re.compile(r"\s+")
